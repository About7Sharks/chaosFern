<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Barnsely Fern</title>
  <style>
    *{
      padding: 0;
      margin: 0;

    }
    .content{
      margin-top: 50px;
      display: flex;
      height: 100vh;
      text-align: center;
      flex-direction: column;
    }
    h3,p{
      text-align: left;
      font-size: 1.2rem;
      align-self: center;
      margin-bottom: 25px;
      width: 300px;

    }
    #canvas{
      width: 320px;
      height: 320px;
      align-self: center;
    }
  </style>
</head>
<body>
  <div class="content">
  <h3 style="border-bottom: 1px solid black;width: auto">Example of order appearing from chaos</h3>
    <p>The Barnsley fern is a fractal named after the British mathematician Michael Barnsley who first described it in his book Fractals Everywhere.He made it to resemble the black spleenwort, Asplenium adiantum-nigrum.</p>
    <span>
      Iterations = <strong><span id="iteration"></span></strong>
    </span>
    <canvas id="canvas" >
  </div>
</canvas>

  <script>
    let canvas;
    let canvasContext;
    let iteration=0;

    let x = 0, y = 0;

    window.onload = function () {
        canvas = document.getElementById("canvas");
        canvasContext = canvas.getContext('2d');

        canvasContext.fillStyle = "white";
        canvasContext.fillRect(0, 0, canvas.width, canvas.height);

        setInterval(() => {
            // Update 20 times every frame
            for (let i = 0; i < 1; i++)
                update();
                
        }, 1000/250); // 250 frames per second
    };

    function update() {

        let nextX, nextY;
        let r = Math.random();
        if (r < 0.01) {
            nextX =  0;
            nextY =  0.16 * y;
        } else if (r < 0.86) {
            nextX =  0.85 * x + 0.04 * y;
            nextY = -0.04 * x + 0.85 * y + 1.6;
        } else if (r < 0.93) {
            nextX =  0.20 * x - 0.26 * y;
            nextY =  0.23 * x + 0.22 * y + 1.6;
        } else {
            nextX = -0.15 * x + 0.28 * y;
            nextY =  0.26 * x + 0.24 * y + 0.44;
        }

        // Scaling and positioning
        let plotX = canvas.width * (x + 3) / 6;
        let plotY = canvas.height - canvas.height * ((y + 2) / 14);

        drawFilledCircle(plotX, plotY, 1, "green");

        x = nextX;
        y = nextY;

    }
    const drawFilledCircle = (centerX, centerY, radius, color) => {
        iteration+=1
        document.getElementById("iteration").innerHTML=iteration
        canvasContext.beginPath();
        canvasContext.fillStyle = color;
        canvasContext.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);
        canvasContext.fill();
    };
</script>
</body>
</html>
